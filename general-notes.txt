Generic Command Format:    
    Any data related to the HTTP request itself should be sent using the -d flag in curl.
        - This is usecase specific data meaning it depends on what the application or endpoint is doing.

curl -X POST -H "Content-Type: application/json" -d '{"data":1234}' http://localhost:8080/create-user
curl -X POST -H "Content-Type: application/json" -d '{"header":{"alg":"HS256","typ":"JWT"},"payload":{"dev":"IPhone","osv":"iOS-17","appv":"1.0.0a"}}' http://localhost:8080/create-user
curl -X POST -H "Content-Type: application/json" -d '{"data":1234}' http://localhost:8080/login-user

Command With Encryption:
curl --key <key.pem> --cert <path/to/cert> -X POST -H "Content-Type: application/json" -d '{"data":1234}' <url>

Command With JWT Authorization: 
    Anything related to identity information or finances should be sent in a JWT
        - This is client specific data

curl -X POST -H "Content-Type: application/json" -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkZXYiOiJJUGhvbmUiLCJvc3YiOiJpT1MtMTciLCJhcHB2IjoiMS4wLjBhIn0.6Br15KPCCGuSZB5eY4LveJAwsi2EtaysyO51OhInxxY" --insecure -d '{"data":1234}' http://localhost:8080/login-user

Creating a JWT:

There are three parts to a JWT. Both the HEADER and PAYLOAD are encoded in Base64Url

HEADER.PAYLOAD.SIGNATURE

HEADER - defines the signing algorithm used and type of token. Supported algorithms are HS256, RS256

    {
        "alg":<signing_algorithm>,
        "typ":"JWT"
    }

PAYLOAD - defines "claims" which are custom or pre-defined data fields
        refer to https://www.iana.org/assignments/jwt/jwt.xhtml a registry containing a list of predfiend claims.
    {
        // predefined 
        "iss":<issuer>,
        "exp":<expiration>,
        "sub":<subject>,
        "aud":<audience>,
        //public
            ...
        //private
            ...
    }   
SIGNATURE - Created using the encoded HEADER and PAYLOAD as well using the signing algorithm

The package basez needs to be installed in order to use base64url encodings. Once installed use the following to encode the HEADER and PAYLOAD
echo -n <HEADER or PAYLOAD> | base64url


Keys and Certificates
    Creating a public key (certificate) from a self-signed private key
openssl rsa -in test-key.pem -out no-pass-key.pem
    Generating a self-signed private key.
openssl req -x509 -newkey rsa:2048 -keyout test-key.pem -out test-cert.pem -days 365
openssl 

openssl genpkey -algorithm RSA -out private.pem
openssl rsa -in private.pem -pubout -out public.pem


Grep for matching encrypted part of PEM file
cat key.pem | grep -vP '(-----.+-----)'